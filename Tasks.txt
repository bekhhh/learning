1. На вход принимаются числа через запятую. Если ввод в некорректном формате, выводить сообщение с ошибкой и ожидать повторный ввод.
Нужно вывести те же самые числа в порядке возрастания.
 - Встроенных методов сортировки массива не использовать. 
 - Допускается любой алгоритм сортировки, выбери понравившийся и используй его.
 - После вывода чисел, программа завершается по нажатию кнопки.

2. Сделать программу, которая принимает любой ввод, до тех пор пока не написано end.
Если написано end, то выйти из программы, иначе программа выводит все написанные слова в том же порядке, но сами буквы расположены в обратном порядке.
Пример:
ввод -- иду за хлебом
вывод -- уди аз мобелх.

3. Написать программу логгер. Работает следующим образом: ожидается ввод, после каждого ввода выводится тот же самый введённый текст, но в начале к нему добавляется "info: ", а сам текст жёлтого цвета.
Если написать "switch",  то переключается режим, и теперь весь вводимый текст в начале будет содержать "error: " и иметь красный цвет.
Если снова написать switch, то режим переключается обратно. В этой задаче понадобится использовать интерфейс/абстрактный класс, и разные реализации. 
 - В самом решении должно получиться 3 проекта: запускаемое приложение и 2 библиотеки классов (1-я библиотека -- интерфейс и 1-я реализация, 2-я библиотека -- 2-я реализация)

4. Задача на файл. Программа принимает на ввод путь к текстовому файлу, который содержит в первой строке символы через запятую, а на всех последующих строках какой то текст. 
Читает файл построчно и создаёт новый файл с таким же наименованием плюс суффикс текущей даты в той же директории.
В создаваемом файле программа записывает в каждой строке через запятую количество каждого символа из первой строки в других строках. 
Пример:

Входной файл. 
н, б, г
На ветке дуба белка
Наш новый гараж

Выходной файл
1, 2, 0
2, 0, 1

5. Программа принимает через запятую описание фигур. Описание фигуры в формате "круг (радиус)/прямоугольник (ширина высота)/треугольник (сторона высота)"
В ответ программа должна вывести площадь каждой фигуры через запятую. Округлять результат до двух знаков после запятой.
Пример:
Ввод
круг 3.5, прямоугольник 2 4, прямоугольник 10 2.3, треугольник 3 4
Вывод
38.47, 8, 23, 6

6. На ввод приходит текст, нужно вывести на каждой строке сколько раз встречается в тексте каждое слово и на какой позиции. Понадобится использовать Dictionary и List.
Пример:
Ввод
из парта хрен парта из
Вывод
слово: "из", количество: 2, позиции: 1, 5
слово: "парта", количество: 2, позиции: 2, 4
слово: "хрен", количество: 1, позиции: 3

7.1 Написать класс Динамического массива.
- Он должен уметь хранить в себе коллекцию элементов одного (любого) типа данных.
- У него должны быть методы добавления в конец коллекции, удаления по индексу и получения элемента по индексу.
- Должно быть свойство Length хранящее фактическую длину динамического массива
- Нельзя в коде использовать любые классы коллекций, кроме массива.
- У него не должно быть ограничений по количеству элементов.
- Массив должен реализовывать интерфейс IEnumerable. (Почитай об этом интейрфейсе подробно или посмотри видео)
- (Подсказка) Класс динамического массива можно делать на основе обычного массива. Когда место в массиве заканчивается, создается новый массив с длинной в два раза больше предыдущей и копируются туда элементы со старого.
Пример:
 у тебя длинна Динамического массива 0 — [], внутри него твой массив длины 3 — [0, 0, 0].
 1. Допустим пользователь добавляет 2 раза в массив элементы 3,5. Тогда длинна Динамического массива 2 — [3, 5], внутри него массив длины 3 — [3, 5, 0]
 2. Пользователь добавляет в массив элемент 3. Длинна Динамического массива 3 — [3, 5, 3], внутри него массив длины 3 — [3, 5, 3]
 3. Теперь пользователь еще добавляет элемент 5. Теперь длинна Динамического массива 4 — [3, 5, 3, 5], а внутри него уже новый массив длины 6 — [3, 5, 3, 5, 0, 0], т к прошлого с длинною 3 не хватило, создался новый с более большим размером.

7.2 Написать юнит-тесты, тестирующие класс Динамичесского массива из задачи 7.
 - Для тестирования использовать библиотеку xUnit.
 - Должны быть протестированы все методы и свойства класса
 - Должны быть протестированы все исключительные случаи (например передача null в параметр)
 - Должны быть тесты как с использованием Fact, так и Theory
 - (Подсказка) 
 1. Базовые сценарии. -- Создал класс, длина должна быть равна 0. При повторном вызове она должна остать равна 0.
 2. Проверяешь добавление. -- создал класс, вызвал добавление элемента, проверил что Length изменилось с 0 на 1. Делаешь парочку тест кейсов подобных.
 3. Получение по индексу. -- создал класс, понадобавлял элементов, проверил что на нужных индексах стоят нужные элементы.
 4. Удаление -- создал класс, добавил элементов, удалил улементов, проверил длину и элементы по индексам.
 5. Ошибочные сценарии -- передали неверный индекс при удалении или получении элемента. Проверяем пару разных кейсов, например удаление из пустого списка, получение 4 элемента в списке длины 3 и т.д.

8. Есть ввод, на первой строке число -- количество массивов. Начиная со второй строки идет список массивов из чисел.
Пример ввода
3
4, 2, 8
3, 4, 9
7, 8, 4, 2
Длина массива на каждой строчке может быть любой.
На вывод нужно вывести список чисел всех массивов через запятую, числа идут по порядку у нечетных по номеру массивов и в обратном порядке у четных по номеру массивов.
Пример вывода на верхний пример ввода
4, 2, 8, 9, 4, 3, 7, 8, 4, 2

9.1. Задача на использование классов. Все придуманное не должно как-то соответствовать действительности и замедлять написание кода, можно проявлять любые фантазии.
- Придумай минимум 7 различных персонажей  (разбойник, маг, рыцарь и т.д.)
- Придумай хотя бы 5 общих характеристик для всех персонажей (Хп, скорость и т д)
- Придумай хотя бы по 2 уникальные характеристики минимум для 5 персонажей (мана для мага, скрытность для разбойника и т д)
- Для каждого базового типа данных (int, string, enum, bool, double) должно быть хотя бы 2 характеристики (для string — настроение, список оружия, для enum — состояние атакующего оружия, для bool — Виден/Не виден у разбойника и т д)
- У каждого персонажа придумай один и тот же список стартовых вещей + одну уникальную для этого персонажа вещь.  Вещь имеет только название, без всяких характеристик. 
- Вывести в консоль список персонажей
- На ввод "get description {персонаж}" выводить в консоль все характеристики персонажа через запятую
- На ввод "get items {персонаж}" выводить в консоль все предметы персонажа через запятую.

9.2*. Усложненная дополненная версия 9.1.
- Каждый предмет должен иметь какое-то свойство, можно просто текстовым описанием (например +1 к хп), при вызове списка предметов, описание предметов должно тоже выводиться. Пример -- Сапоги (+2 к скорости перемещения)
- На ввод "start {персонаж}" выводить "you choose {персонаж}" и на следующей строке список характеристик и предметов в формате JSON
Пример вывода
{
    "Health": 12,
    "Mana" : 23,
    "Items" : [ 
        {
            "Name": "Броня",
            "Description": "+1 к хп"
        }
] 
} 
- если уже был введен старт, то доступны еще 2 команды
- "add ability {name} {описание} {Значение какой нибудь общей для всех способностей характеристики, например стихии enum}" Добавляет персонажу способность с соответствующими именем, описанием, и характеристикой
- "show info" выводит описание персонажа в JSON также, как это было при команде start, Но только без "you choose {персонаж}" и с отображением способностей
Спобности будут в формате 
{
...
"Items": [
...
]
"Abilities": [
    {
        "Name": "wasd",
        "Description": "asdas",
        "{Характеристика}": "{Значение характеристики}"
    },
    ...
]
}
- Убедиться в корректной работе при добавлении нескольких способностей с несколькими характеристиками
- Для работы с Json использовать либо библиотеку System.Text.Json, либо Newtonsoft.Json, т к это самые популярные библиотеки. Лучше использовать первую библиотеку. 
Библиотека добавляется через пакеты nuget, погугли как это делается.
